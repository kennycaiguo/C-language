c语言文件加密的基本思路：先读取文件去全部内容到一个字符串中。将字符串中的每一个字符加上一个
整数（也叫做密码），将新的字符串保存到一个新文件中。
解密思路，先读取文件去全部内容到一个字符串中。将字符串中的每一个字符减去一个
整数（也叫做密码），将新的字符串保存到一个新文件中。注意：加密和解密的密码必须一样。
实例：
FileEncryptor.c

内容如下:
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char *EnOrDe = NULL;
//1.加密

char *file_text_encrypt(char * src_file_text, unsigned long int length, unsigned int password)
{
	char *data = NULL;
	unsigned int i = 0;
	for (i = 0; i<length; i++)
	{
		src_file_text[i] += password;
	}

	return src_file_text;


}

//2.解密：
char *file_text_decrypt(char * src_file_text, unsigned long int length, unsigned int password)
{
	char *data = NULL;
	unsigned int i = 0;
	for (i = 0; i<length; i++)
	{
		src_file_text[i] -= password;
	}

	return src_file_text;
}

//定义一个获取基本文件名（"."以前的部分）的函数
void  GetBaseFileName(char** dst,char* filename)
{
	if (dst == NULL)
	{
		return;
	}
	//查找"."的位置
	char*pos = strchr(filename, '.');
	//根据位置计算基本文件名的长度
	int len = pos - filename;
	char buf[1024] = {0};
	//复制len的长度的字符到buf中，也就是基本文件名
	strncpy(buf, filename, len);
	*dst = buf;
	 
}
/*
 “en”--加密，“de”--解密

*/
//void testFileEncrytor(char* filename,char* type)
//{
//	if (filename == NULL||type==NULL)
//	{
//		return;
//
//	}
//	EnOrDe = type;
//	
//	if (strcmp(EnOrDe, "en") == 0)
//	{
//		//打开源文件
//		FILE * fp = fopen(filename, "r");
//		//获取文件长度
//		fseek(fp, 0, SEEK_END);
//		long length = ftell(fp);
//		//printf("%d", length);
//		char content[1024] = { 0 };
//		rewind(fp);
//		fread(content, length, 1, fp);
//		//printf("%s", content);
//		fclose(fp);
//		char *data = file_text_encrypt(content, length, 123);
//		char* output=(char*)malloc(100);
//		char *buf = (char*)malloc(100);
//		GetBaseFileName(&buf, filename);
//		//printf("%s", buf);
//		sprintf(output, "%s_encr.txt", buf);
//		fp = fopen(output, "w");
//		fwrite(data, length, 1, fp);
//		fclose(fp);
//		free(output);
//		free(buf);
//	}
//	else if (strcmp(EnOrDe, "de") == 0)
//	{
//		//打开源文件
//		FILE * fp = fopen(filename, "r");
//		//获取文件长度
//		fseek(fp, 0, SEEK_END);
//		long length = ftell(fp);
//		//计算完长度后，必须重新将文件指针设置到文件开始的位置，否则读不到数据
//		rewind(fp);
//		
//		char content[1024] = { 0 };
//		fread(content, length, 1, fp);
//		//printf("%s", content);
//		fclose(fp);
//		char *data = file_text_decrypt(content, length, 123);
//		char* output = (char*)malloc(100);
//		char *buf = (char*)malloc(100);
//		GetBaseFileName(&buf, filename);
//		sprintf(output, "%s_dencr.txt", buf);
//		fp = fopen(output, "w");
//		fwrite(data, length, 1, fp);
//		fclose(fp);
//		free(output);
//		free(buf);
//	}
//	else
//	{
//		printf("the process type only allowed en or de");
//		return;
//	}
//}

void testFileEncrytProc(char* filename, char* type)
{
	if (filename == NULL || type == NULL)
	{
		printf("文件名和类型不能为空\n");
		return;

	}
	if ((strcmp(type, "en") != 0) && (strcmp(type, "de") != 0))
	{
		printf("只有en和de两种操作\n");
		return;
	}
	//打开源文件
	FILE * fp = fopen(filename, "r");
	//获取文件长度
	fseek(fp, 0, SEEK_END);
	long length = ftell(fp);
	//计算完长度后，必须重新将文件指针设置到文件开始的位置，否则读不到数据
	rewind(fp);

	char content[1024] = { 0 };
	fread(content, length, 1, fp);
	//printf("%s", content);
	fclose(fp);
	char *data = NULL;
	//如果是加密则调用加密函数
	if (strcmp(type, "en") == 0)
	{
		data = file_text_encrypt(content, length, 123);
	}
	//如果是解密，则调用解密函数
	if (strcmp(type, "de") == 0)
	{
		data = file_text_decrypt(content, length, 123);
	}
	char* output = (char*)malloc(100);
	char *buf = (char*)malloc(100);
	GetBaseFileName(&buf, filename);
	//根据解密或者解密生成对应的文件名
	if (strcmp(type, "en") == 0)
	{
		sprintf(output, "%s_encr.txt", buf);
	}
	else if (strcmp(type, "de") == 0)
	{
		sprintf(output, "%s_dencr.txt", buf);
	}
	
	fp = fopen(output, "w");
	fwrite(data, length, 1, fp);
	fclose(fp);
}
int main(int argc, char const *argv[])
{
	 
	//testFileEncrytProc("d:\\hello.txt", "en");
	testFileEncrytProc("d:\\hello_encr.txt", "de");
	system("pause");
	return 0;
}
